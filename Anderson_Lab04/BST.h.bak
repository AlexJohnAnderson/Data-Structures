/** -----------------------------------------------------------------------------
 *
 * @file  BST.h
 * @author Alex Anderson 
 * Assignment:   EECS-268 Lab 7
 * @brief This program will allow the user to choose what to do with a BST
 * @date 07/29/2021
 *
 ---------------------------------------------------------------------------- **/
#ifndef BST_H
#define BST_H
#include <iostream>
#include "BNode.h"
#include <stdexcept>
#include "BSTInterface.h"
//template <typename ItemType, typename KeyType>
class BST : public BSTInterface
{

	private:
	BNode<Object>* m_root;
	//node pointer that keeps track of root
	BNode<Object>* findMax(BNode<Object>* subtree);
	/**
	* @pre None
	* @post returns max value in subtree as node pointer
	* @param takes in subtree to traverse to largest value
	* @throw exception if subtree is empty
	*/

	void doAdd(Object entry, BNode<Object>* subtree);
	/**
	* @pre must not be a duplicate
	* @post returns nothing
	* @param takes in an entry to add at as well as a pointer to a subtree
	* @throw exception if already in tree
	*/

	//Object doSearch(int key, BNode<Object>* subtree) const;
	/**
	* @pre Must be in the tree
	* @post returns the entry that is being searched for
	* @param key to match with entry as well as pointer to subtree
	* @throw exception if element is missing from tree
	*/

	void doCopy(BNode<Object>* jumper);
	/**
	* @pre Must be the first and only copy
	* @post returns nothing
	* @param takes in a jumper to traverse the entire tree
	* @throw exception if copy already exists
	*/

	void doClear(BNode<Object>* subtree);
	/**
	* @pre none
	* @post returns nothing
	* @param T entry to be set to current node
	* @throw exception if trying to clear an empty tree
	*/

	void doRemove(BNode<Object>* subtree);
	/**
	* @pre target must exist
	* @post returns nothing
	* @param takes in key to match with entry as well as two pointers, one to the parent
	*        and the other to the subtree. 
	* @throw exception is subtree does not exist
	*/

	void doIsLeaf(BNode<Object>* subtree, int key);
	void doLevelOrder(BNode<Object>* subtree, void visit(Object)) const;
	void doPreOrder(BNode<Object>* subtree, void visit(Object)) const;
	void doInOrder(BNode<Object>* subtree, void visit(Object)) const;
	void doPostOrder(BNode<Object>* subtree, void visit(Object)) const;
	/**
	* @pre each of the traversals must travel through a tree that is not empty
	* @post returns nothing
	* @param Takes in subtree as well as a function named visit that essentially
	*	 calls the print name function from the object class
	* @throw exception is tree is empty
	*/
	
	int count;
	//keeps track of tree size.
	public:
	BST();
	/**
	* @pre None
	* @post sets root to nullptr
	* @param none
	* @throw none
	*/

	~BST();
	//calls clear function
	
	bool isFull();
	//function to check if tree is full.
	int treeHeight();
	//function that returns the height of the tree.
	bool isLeaf();

	void operator=(const BST& rhs);
	//operatior overloader to compare entries

	void add(Object entry);
	//takes in an entry and calls the doAdd function

	//Object search(int key) const;
	//takes in a key(ID) and calls the doSearch function

	void remove();
	//takes in a key and calls the doRemove function

	void clear();
	//throws excpetion is tree already cleared and calls the recursive clear function

	void visitLevelOrder(void visit(Object)) const;
	//traverses tree in level order
	
	void visitPreOrder(void visit(Object)) const;
	//calls the recursive Preorder function, throws exception if empty tree

	void visitInOrder(void visit(Object)) const;
	//calls the recursive inorder function, throws exception if empty tree

	void visitPostOrder(void visit(Object)) const;
	//calls the recursive post order function, throws exception if empty tree

	
};
#endif